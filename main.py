import os
import logging
import asyncio
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import aiohttp
import nest_asyncio

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏ (Render, Replit —Ç–æ—â–æ)
nest_asyncio.apply()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")

def log_status(message: str):
    logger.info(f"[–°–¢–ê–¢–£–°] {message}")

def log_error(error: str):
    logger.error(f"[–ü–û–ú–ò–õ–ö–ê] {error}")

FOOTER = "..."

LINKS = { ... }  # –ó–∞–ª–∏—à —è–∫ —î

def format_steps(text: str) -> str:
    return re.sub(r'(?<!\d)\b(\d+)\. ', lambda m: f"{m.group(1)}Ô∏è‚É£ ", text)

def replace_keywords(text: str) -> str:
    for word, link in LINKS.items():
        text = re.sub(rf"(?i)\b{re.escape(word)}\b", link, text)
    return text

async def paraphrase_text(text: str) -> str:
    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {"Authorization": f"Bearer {OPENROUTER_KEY}"}
        data = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{"role": "user", "content": f"... {text}"}]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status != 200:
                    log_error(f"OpenRouter API error ‚Äî —Å—Ç–∞—Ç—É—Å {response.status}")
                    return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenRouter API."
                result = await response.json()
                return result.get("choices", [{}])[0].get("message", {}).get("content", text)
    except Exception as e:
        log_error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ —Ç–µ–∫—Å—Ç: {e}")
        return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç—É."

async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        user_text = update.message.text
        log_status(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_text[:50]}")

        if not user_text:
            await update.message.reply_text("üîπ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î.")
            return

        loading_msg = await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à —Ç–µ–∫—Å—Ç...")

        rewritten = await paraphrase_text(user_text)
        formatted = format_steps(rewritten)
        final_text = replace_keywords(formatted)

        await loading_msg.edit_text(f"{final_text}\n\n{FOOTER}", parse_mode="Markdown")
        log_status("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        log_error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üöÄ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —ñ —è –π–æ–≥–æ –ø–æ–∫—Ä–∞—â—É!")

async def main():
    try:
        log_status("–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É")
        app = Application.builder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        log_status("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, –æ—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await app.run_polling()
    except Exception as e:
        log_error(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())

