import os
import logging
import asyncio
import re
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import aiohttp
import nest_asyncio

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ–≤
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

nest_asyncio.apply()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")

FOOTER = "ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–æ—Ç–æ–º-–ø–æ–º—ñ—á–Ω–∏–∫–æ–º. –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ ‚Äî –∑–∞–≤–∂–¥–∏ –≤—ñ—Ç–∞—î—Ç—å—Å—è!"

# –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
LINKS = {
    "Python": "[Python](https://www.python.org/)",
    "asyncio": "[asyncio](https://docs.python.org/3/library/asyncio.html)",
    "telegram": "[Telegram Bot API](https://core.telegram.org/bots/api)",
    "aiohttp": "[aiohttp](https://docs.aiohttp.org/)",
    # –î–æ–¥–∞–π —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
}

def format_steps(text: str) -> str:
    return re.sub(r'(?<!\d)\b(\d+)\. ', lambda m: f"{m.group(1)}Ô∏è‚É£ ", text)

def replace_keywords(text: str) -> str:
    if not isinstance(LINKS, dict):
        logger.error("‚ùó LINKS –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º, –∞ –Ω–µ —Ç–∏–ø—É %s", type(LINKS).__name__)
        return text
    for word, link in LINKS.items():
        try:
            text = re.sub(rf"(?i)\b{re.escape(word)}\b", link, text)
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–º—ñ–Ω–∏—Ç–∏ —Å–ª–æ–≤–æ '%s': %s", word, e)
    return text

async def paraphrase_text(text: str) -> str:
    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {"Authorization": f"Bearer {OPENROUTER_KEY}"}
        data = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{
                "role": "user",
                "content": f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∑–º—ñ—Å—Ç: {text}"
            }]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"‚ùå OpenRouter –ø–æ–º–∏–ª–∫–∞ {response.status}: {error_text}")
                    return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenRouter."
                result = await response.json()
                return result.get("choices", [{}])[0].get("message", {}).get("content", text)
    except Exception as e:
        logger.exception("‚ÄºÔ∏è –ü–∞—Äa—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return "‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        user_text = update.message.text
        if not user_text:
            await update.message.reply_text("üîπ –ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return

        loading_msg = await update.message.reply_text("‚è≥ –û–ø—Ä–∞—Ü—å–æ–≤—É—é...")

        rewritten = await paraphrase_text(user_text)
        formatted = format_steps(rewritten)
        final_text = replace_keywords(formatted)

        await loading_msg.edit_text(f"{final_text}\n\n{FOOTER}", parse_mode="Markdown")
    except Exception as e:
        logger.exception("üö® –û–±—Ä–æ–±–∫–∞ –∑—ñ—Ä–≤–∞–ª–∞—Å—å")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥–∏ –∞–±–æ —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üöÄ –Ø –≥–æ—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ç–µ–∫—Å—Ç–∏! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©")

async def reset_webhook():
    bot = Bot(token=BOT_TOKEN)
    await bot.delete_webhook()
    logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω–æ")

async def main():
    await reset_webhook()

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
