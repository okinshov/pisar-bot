import os
import logging
import asyncio
import re
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import aiohttp

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")

FOOTER = "ü§ñ –ì–µ–Ω–µ—Ä—É—î –¥—É–º–∫–∏ –±–µ–∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö."
LINKS = {
    "Python": "[Python](https://www.python.org/)",
    "Telegram": "[Telegram Bot API](https://core.telegram.org/bots/api)",
    "asyncio": "[asyncio](https://docs.python.org/3/library/asyncio.html)"
}

def format_steps(text: str) -> str:
    return re.sub(r'(?<!\d)\b(\d+)\. ', lambda m: f"{m.group(1)}Ô∏è‚É£ ", text)

def replace_keywords(text: str) -> str:
    if not isinstance(LINKS, dict):
        logger.error("LINKS –º–∞—î –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º.")
        return text
    for word, link in LINKS.items():
        try:
            text = re.sub(rf"(?i)\b{re.escape(word)}\b", link, text)
        except Exception as e:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–º—ñ–Ω–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ %s: %s", word, e)
    return text

async def paraphrase_text(text: str) -> str:
    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {"Authorization": f"Bearer {OPENROUTER_KEY}"}
        payload = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{"role": "user", "content": f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π: {text}"}]
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status != 200:
                    logger.error("OpenRouter %s: %s", resp.status, await resp.text())
                    return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenRouter."
                data = await resp.json()
                return data.get("choices", [{}])[0].get("message", {}).get("content", text)
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è")
        return "‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞."

async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        user_text = update.message.text
        if not user_text:
            await update.message.reply_text("üîπ –ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return

        loading = await update.message.reply_text("‚è≥ –û–ø—Ä–∞—Ü—å–æ–≤—É—é...")

        rewritten = await paraphrase_text(user_text)
        formatted = format_steps(rewritten)
        final_text = replace_keywords(formatted)

        await loading.edit_text(f"{final_text}\n\n{FOOTER}", parse_mode="Markdown")
    except Exception:
        logger.exception("–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ—Ä–≤–∞–ª–∞—Å—å")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –∂—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π.")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π! –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")

async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
